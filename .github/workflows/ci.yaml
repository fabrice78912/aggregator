name: 'CI - Build, Scan, Push and Trigger CD'

on:
  push:
    branches:
      - main
      - dev
      - rc-*
      - feature/*
  pull_request:
    branches:
      - main
      - dev
      - rc-*
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: write  # pour GitHub Packages

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  ECR_REPO: ${{ secrets.ECR_REPO }}
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  REPO_DEPLOY: ${{ secrets.REPO_DEPLOY }}
  REPO_NAME: ${{ secrets.REPO_NAME }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  MAVEN_SETTINGS: .github/maven-settings.xml  # chemin du settings.xml

jobs:
  detect-branch:
    runs-on: ubuntu-latest
    outputs:
      is-first-push: ${{ steps.check.outputs.is_first_push }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: check
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "is_first_push=false" >> $GITHUB_OUTPUT
          else
            echo "is_first_push=true" >> $GITHUB_OUTPUT
          fi

  build-test:
    needs: detect-branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build & Run Tests
        run: mvn clean verify --settings $MAVEN_SETTINGS -Dmaven.test.failure.ignore=false

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Upload build artifact (.jar)
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sonar-analysis:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'

      - uses: actions/download-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=my-project
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
            -Dsonar.login=${{ env.SONAR_TOKEN }}
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        with:
          sonar-token: ${{ env.SONAR_TOKEN }}

  docker-build-scan:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      - name: Build Docker image
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          docker build -t $ECR_REGISTRY/${{ env.REPO_NAME }}:$IMAGE_TAG .

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $ECR_REGISTRY/${{ env.REPO_NAME }}:${GITHUB_SHA}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

  build-push:
    needs: [docker-build-scan, sonar-analysis]
    runs-on: ubuntu-latest
    if: ${{ (needs.detect-branch.outputs.is-first-push == 'false' || github.event_name == 'pull_request') && needs.sonar-analysis.outputs.quality-gate-status == 'OK' }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsECRRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment tag with date
        run: |
          SHA=$(echo "${GITHUB_SHA}" | cut -c1-8)
          DATE=$(date +%Y%m%d-%H%M%S)
          REF="${GITHUB_REF#refs/heads/}"
          if [[ "$REF" == "main" ]]; then
            ENV="prod"
            TAG="prod-${SHA}-${DATE}"
          elif [[ "$REF" == "dev" ]]; then
            ENV="dev"
            TAG="dev-${SHA}-${DATE}"
          elif [[ "$REF" == rc-* ]]; then
            ENV="staging"
            TAG="staging-${SHA}-${DATE}"
          elif [[ "$REF" == feature/* ]]; then
            ENV="dev"
            TAG="dev-${SHA}-${DATE}"
          else
            ENV="unknown"
            TAG="unknown-${SHA}-${DATE}"
          fi
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Push Docker image
        run: docker push $ECR_REGISTRY/${{ env.REPO_NAME }}:${{ env.TAG }}
